{"file_contents":{"DEPLOYMENT.md":{"content":"# Deployment Guide\n\nThis guide provides instructions for deploying the Grammar Master LMS to various platforms.\n\n## 🚀 Quick Deploy Options\n\n### Replit Deployment (Recommended for Development)\n1. Your project is already set up on Replit\n2. Click the \"Deploy\" button in your Replit workspace\n3. Follow the deployment wizard to configure your app\n4. Your app will be available at `https://your-app-name.your-username.repl.co`\n\n### Vercel Deployment\n1. Push your code to GitHub (see instructions below)\n2. Visit [vercel.com](https://vercel.com) and sign in\n3. Click \"New Project\" and import your GitHub repository\n4. Configure build settings:\n   - **Framework Preset**: Vite\n   - **Root Directory**: `./`\n   - **Build Command**: `npm run build`\n   - **Output Directory**: `dist`\n5. Add environment variables in Vercel dashboard\n6. Deploy!\n\n### Netlify Deployment\n1. Push your code to GitHub\n2. Visit [netlify.com](https://netlify.com) and sign in\n3. Click \"New site from Git\" and connect your repository\n4. Configure build settings:\n   - **Build command**: `npm run build`\n   - **Publish directory**: `dist`\n5. Add environment variables in Netlify dashboard\n6. Deploy!\n\n## 📦 Environment Variables\n\nCreate these environment variables in your deployment platform:\n\n```env\nNODE_ENV=production\nJWT_SECRET=your-secure-jwt-secret-key\nDATABASE_URL=your-postgresql-connection-string\nPORT=5000\n```\n\n## 🗄️ Database Setup\n\n### Using Neon Database (Recommended)\n1. Visit [neon.tech](https://neon.tech) and create an account\n2. Create a new database project\n3. Copy the connection string\n4. Add it as `DATABASE_URL` environment variable\n\n### Using Railway PostgreSQL\n1. Visit [railway.app](https://railway.app) and create an account\n2. Create a new project and add a PostgreSQL database\n3. Copy the connection string from the database tab\n4. Add it as `DATABASE_URL` environment variable\n\n### Using Supabase\n1. Visit [supabase.com](https://supabase.com) and create an account\n2. Create a new project\n3. Go to Settings > Database and copy the connection string\n4. Add it as `DATABASE_URL` environment variable\n\n## 🔧 Production Configuration\n\n### Build Optimization\nThe project is already configured with:\n- Vite for fast builds and optimization\n- TypeScript compilation\n- CSS minification\n- Asset optimization\n\n### Security Considerations\n- JWT secrets should be strong and unique\n- Database connections should use SSL in production\n- Environment variables should never be committed to git\n- CORS should be configured for your domain\n\n## 📱 GitHub Setup\n\nSince git operations are restricted in this environment, here's how to set up your GitHub repository:\n\n### 1. Create a New Repository on GitHub\n1. Go to [github.com](https://github.com) and create a new repository\n2. Name it `grammar-master-lms` or your preferred name\n3. Don't initialize with README (we already have one)\n\n### 2. Download Your Project Files\n1. In Replit, click the three dots menu\n2. Select \"Download as zip\"\n3. Extract the files on your local machine\n\n### 3. Initialize Git and Push\nOn your local machine, run these commands:\n\n```bash\n# Navigate to your project directory\ncd grammar-master-lms\n\n# Initialize git repository\ngit init\n\n# Add all files\ngit add .\n\n# Make initial commit\ngit commit -m \"Initial commit: Complete Grammar Master LMS\"\n\n# Add remote origin (replace with your repository URL)\ngit remote add origin https://github.com/yourusername/grammar-master-lms.git\n\n# Push to GitHub\ngit push -u origin main\n```\n\n### 4. Alternative: Use GitHub CLI\nIf you have GitHub CLI installed:\n\n```bash\n# Create repository and push\ngh repo create grammar-master-lms --public\ngit add .\ngit commit -m \"Initial commit: Complete Grammar Master LMS\"\ngit push -u origin main\n```\n\n## 🚀 Production Checklist\n\nBefore deploying to production:\n\n- [ ] Set strong JWT secret\n- [ ] Configure production database\n- [ ] Set NODE_ENV=production\n- [ ] Test all authentication flows\n- [ ] Test quiz functionality\n- [ ] Test lesson booking\n- [ ] Verify email notifications work\n- [ ] Test responsive design on mobile\n- [ ] Run security audit\n- [ ] Set up monitoring and logging\n- [ ] Configure domain and SSL\n- [ ] Set up backup procedures\n\n## 📊 Monitoring and Analytics\n\nConsider adding these tools for production:\n- **Sentry** for error tracking\n- **Google Analytics** for user analytics\n- **Uptime monitoring** for availability\n- **Database monitoring** for performance\n\n## 🔄 Updates and Maintenance\n\nTo update your deployed application:\n1. Make changes in your development environment\n2. Test thoroughly\n3. Commit and push to GitHub\n4. Your deployment platform will automatically rebuild and deploy\n\n---\n\nYour Grammar Master LMS is ready for deployment! Choose the platform that best fits your needs and follow the appropriate guide above.","size_bytes":4801},"README.md":{"content":"# Grammar Master - Learning Management System\n\nA comprehensive grammar education platform built as a full-stack web application. The system serves as a learning management system specifically designed for grammar instruction, featuring interactive quizzes, lesson booking, resource management, and student progress tracking.\n\n## 🚀 Features\n\n### Core Features\n- **User Authentication**: Secure login/register with JWT tokens and role-based access (students/teachers)\n- **Interactive Quizzes**: Timed grammar quizzes with immediate feedback and progress tracking\n- **Lesson Booking**: Calendar-based lesson scheduling with different lesson types\n- **Progress Analytics**: Comprehensive dashboard with statistics and learning insights\n- **Resource Library**: Access to grammar guides, videos, worksheets, and practice materials\n- **Discussion Forum**: Community space for students to ask questions and share knowledge\n- **Dark/Light Theme**: Modern UI with theme switching support\n\n### Technical Features\n- **Responsive Design**: Mobile-first approach with seamless desktop experience\n- **Real-time Updates**: Live notifications and progress tracking\n- **Accessibility**: WCAG compliant with proper ARIA labels and keyboard navigation\n- **Type Safety**: Full TypeScript implementation across frontend and backend\n- **Modern Architecture**: Component-based React with clean API design\n\n## 🛠️ Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Wouter** for client-side routing\n- **TanStack Query** for server state management\n- **React Hook Form** with Zod validation\n- **Tailwind CSS** for styling\n- **shadcn/ui** components built on Radix UI\n- **Lucide React** for icons\n\n### Backend\n- **Node.js** with Express.js\n- **TypeScript** for type safety\n- **JWT** for authentication\n- **bcryptjs** for password hashing\n- **Drizzle ORM** for database operations\n\n### Database\n- **PostgreSQL** with Drizzle schema\n- **Neon Database** serverless driver\n\n### Development Tools\n- **Vite** for fast development and building\n- **ESLint** and **Prettier** for code quality\n- **Replit** for development environment\n\n## 📁 Project Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Application pages\n│   │   ├── lib/           # Utility functions and configurations\n│   │   └── hooks/         # Custom React hooks\n├── server/                # Backend Express application\n│   ├── index.ts          # Server entry point\n│   ├── routes.ts         # API route definitions\n│   └── storage.ts        # Data layer with in-memory storage\n├── shared/               # Shared types and schemas\n│   └── schema.ts         # Database schema and validation\n└── components.json       # shadcn/ui configuration\n```\n\n## 🚦 Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn package manager\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone <your-repo-url>\ncd grammar-master-lms\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Start the development server:\n```bash\nnpm run dev\n```\n\n4. Open your browser and navigate to `http://localhost:5000`\n\n### Default Accounts\n\nThe application comes with a seeded teacher account:\n- **Email**: teacher@grammarmaster.com\n- **Password**: password\n- **Role**: Teacher\n\nStudents can register through the application interface.\n\n## 📚 Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run preview` - Preview production build\n\n## 🎯 Usage\n\n### For Students\n1. **Register** for a new account or **login** with existing credentials\n2. **Take Quizzes** to test your grammar knowledge\n3. **Book Lessons** with available teachers\n4. **Track Progress** through the comprehensive dashboard\n5. **Access Resources** including guides, videos, and practice materials\n6. **Participate in Forums** to ask questions and help others\n\n### For Teachers\n1. **Login** with teacher credentials\n2. **Create and Manage** quizzes and learning materials\n3. **Schedule Lessons** with students\n4. **Monitor Student Progress** through analytics\n5. **Manage Resources** and course content\n\n## 🔧 Configuration\n\n### Environment Variables\nCreate a `.env` file in the root directory:\n\n```env\nNODE_ENV=development\nJWT_SECRET=your-secret-key-here\nDATABASE_URL=your-database-connection-string\n```\n\n### Database Setup\nThe application uses Drizzle ORM with PostgreSQL. The schema is defined in `shared/schema.ts` and includes:\n- Users (students and teachers)\n- Quizzes with questions and answers\n- Lesson bookings and scheduling\n- Learning resources and materials\n- Forum posts and discussions\n- Contact messages and inquiries\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- Built with modern web technologies and open-source libraries\n- UI components from shadcn/ui and Radix UI\n- Icons from Lucide React\n- Inspired by modern learning management systems\n\n## 📞 Support\n\nFor support, please create an issue in the GitHub repository or contact the development team.\n\n---\n\n**Grammar Master** - Empowering language learners with comprehensive grammar education tools.","size_bytes":5631},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Grammar Teacher Learning Management System\n\n## Overview\n\nThis is a comprehensive grammar education platform built as a full-stack web application. The system serves as a learning management system specifically designed for grammar instruction, featuring interactive quizzes, lesson booking, resource management, and student progress tracking. The platform supports both student and teacher roles, with teachers able to create content and manage lessons while students can take quizzes, book lessons, and track their progress.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application is built using React with TypeScript, following a component-based architecture. The application uses Vite as the build tool and development server, providing fast hot module replacement and optimized builds. The UI is constructed using shadcn/ui components built on top of Radix UI primitives, ensuring accessibility and consistent design patterns. TanStack Query handles client-side state management and server synchronization, providing caching and optimistic updates. The routing is managed by Wouter, a lightweight client-side router.\n\n### Backend Architecture\nThe server follows a REST API architecture built with Express.js and TypeScript. The application uses a layered architecture with clear separation between routes, business logic, and data access layers. Authentication is implemented using JSON Web Tokens (JWT) with bcrypt for password hashing. The server includes middleware for request logging, error handling, and authentication verification.\n\n### Data Layer\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations and migrations. The database schema supports user management, quiz systems, lesson scheduling, resource management, forum posts, and contact messages. The schema is designed with proper foreign key relationships and includes support for JSONB fields for flexible data storage (quiz questions and answers).\n\n### Component Design System\nThe UI implements a comprehensive design system using Tailwind CSS with CSS custom properties for theme management. The system supports both light and dark themes with consistent color tokens and typography scales. Components are built using the compound component pattern with proper accessibility features including ARIA labels, keyboard navigation, and screen reader support.\n\n### Authentication & Authorization\nUser authentication is handled through a centralized auth system that manages JWT tokens and user sessions. The system supports role-based access control with distinct permissions for students and teachers. Authentication state is managed through a custom hook that provides login, logout, and user context throughout the application.\n\n### State Management\nThe application uses TanStack Query for server state management, providing automatic caching, background updates, and error handling. Local UI state is managed through React hooks and context where appropriate. The auth system maintains global user state through a custom AuthManager class that handles token persistence in localStorage.\n\n## External Dependencies\n\n### Database & ORM\n- PostgreSQL database for data persistence\n- Drizzle ORM for type-safe database operations and schema management\n- Neon Database serverless driver for PostgreSQL connections\n\n### UI & Styling\n- Radix UI primitives for accessible component foundations\n- Tailwind CSS for utility-first styling approach\n- Lucide React for consistent iconography\n- React Hook Form with Zod for form validation and type safety\n\n### Development & Build Tools\n- Vite for development server and build optimization\n- TypeScript for type safety and developer experience\n- ESBuild for fast production builds\n- Replit integration for development environment\n\n### Authentication & Security\n- bcryptjs for password hashing\n- jsonwebtoken for JWT token generation and verification\n- Zod for runtime type validation and schema enforcement\n\n### Client-side Libraries\n- TanStack React Query for server state management and caching\n- Wouter for lightweight client-side routing\n- React Day Picker for date selection components\n- Class Variance Authority (CVA) for component variant management\n\nThe architecture prioritizes type safety, accessibility, and maintainability while providing a scalable foundation for a comprehensive learning management system. The separation of concerns between frontend and backend allows for independent development and deployment strategies.","size_bytes":4600},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          50: \"var(--primary-50)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          50: \"var(--success-50)\",\n          500: \"var(--success-500)\",\n          600: \"var(--success-600)\",\n        },\n        warning: {\n          50: \"var(--warning-50)\",\n          500: \"var(--warning-500)\",\n          600: \"var(--warning-600)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3153},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  loginSchema, \n  registerSchema, \n  insertLessonSchema,\n  insertQuizResultSchema,\n  insertContactMessageSchema \n} from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Auth middleware\nconst authenticateToken = async (req: any, res: any, next: any) => {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: \"Invalid token\" });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(userData.username);\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      const { confirmPassword, ...userToCreate } = userData;\n      const user = await storage.createUser(userToCreate);\n      \n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, token });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, token });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: any, res) => {\n    const { password, ...userWithoutPassword } = req.user;\n    res.json({ user: userWithoutPassword });\n  });\n\n  // Quiz routes\n  app.get(\"/api/quizzes\", async (req, res) => {\n    try {\n      const quizzes = await storage.getQuizzes();\n      res.json(quizzes);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/quizzes/:id\", async (req, res) => {\n    try {\n      const quiz = await storage.getQuiz(req.params.id);\n      if (!quiz) {\n        return res.status(404).json({ message: \"Quiz not found\" });\n      }\n      res.json(quiz);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/quiz-results\", authenticateToken, async (req: any, res) => {\n    try {\n      const resultData = insertQuizResultSchema.parse({\n        ...req.body,\n        userId: req.user.id,\n      });\n      \n      const result = await storage.createQuizResult(resultData);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/quiz-results\", authenticateToken, async (req: any, res) => {\n    try {\n      const results = await storage.getQuizResults(req.user.id);\n      res.json(results);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Lesson routes\n  app.get(\"/api/lessons\", authenticateToken, async (req: any, res) => {\n    try {\n      const lessons = await storage.getLessons(req.user.id);\n      res.json(lessons);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/lessons\", authenticateToken, async (req: any, res) => {\n    try {\n      const lessonData = insertLessonSchema.parse({\n        ...req.body,\n        studentId: req.user.id,\n      });\n      \n      const lesson = await storage.createLesson(lessonData);\n      res.json(lesson);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Resource routes\n  app.get(\"/api/resources\", async (req, res) => {\n    try {\n      const resources = await storage.getResources();\n      res.json(resources);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Forum routes\n  app.get(\"/api/forum\", async (req, res) => {\n    try {\n      const posts = await storage.getForumPosts();\n      res.json(posts);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Contact routes\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const messageData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(messageData);\n      res.json(message);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5880},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Quiz, \n  type InsertQuiz,\n  type QuizResult,\n  type InsertQuizResult,\n  type Lesson,\n  type InsertLesson,\n  type Resource,\n  type InsertResource,\n  type ForumPost,\n  type InsertForumPost,\n  type ContactMessage,\n  type InsertContactMessage,\n  users,\n  quizzes,\n  quizResults,\n  lessons,\n  resources,\n  forumPosts,\n  contactMessages\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { eq } from \"drizzle-orm\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Quiz operations\n  getQuizzes(): Promise<Quiz[]>;\n  getQuiz(id: string): Promise<Quiz | undefined>;\n  createQuiz(quiz: InsertQuiz): Promise<Quiz>;\n  \n  // Quiz result operations\n  getQuizResults(userId: string): Promise<QuizResult[]>;\n  createQuizResult(result: InsertQuizResult): Promise<QuizResult>;\n  \n  // Lesson operations\n  getLessons(userId: string): Promise<Lesson[]>;\n  createLesson(lesson: InsertLesson): Promise<Lesson>;\n  updateLesson(id: string, updates: Partial<Lesson>): Promise<Lesson | undefined>;\n  \n  // Resource operations\n  getResources(): Promise<Resource[]>;\n  createResource(resource: InsertResource): Promise<Resource>;\n  \n  // Forum operations\n  getForumPosts(): Promise<ForumPost[]>;\n  createForumPost(post: InsertForumPost): Promise<ForumPost>;\n  \n  // Contact operations\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private quizzes: Map<string, Quiz>;\n  private quizResults: Map<string, QuizResult>;\n  private lessons: Map<string, Lesson>;\n  private resources: Map<string, Resource>;\n  private forumPosts: Map<string, ForumPost>;\n  private contactMessages: Map<string, ContactMessage>;\n\n  constructor() {\n    this.users = new Map();\n    this.quizzes = new Map();\n    this.quizResults = new Map();\n    this.lessons = new Map();\n    this.resources = new Map();\n    this.forumPosts = new Map();\n    this.contactMessages = new Map();\n    \n    this.seedData();\n  }\n\n  private async seedData() {\n    // Create default teacher\n    const teacherId = randomUUID();\n    const teacher: User = {\n      id: teacherId,\n      username: \"teacher\",\n      email: \"teacher@grammarmaster.com\",\n      password: await bcrypt.hash(\"password\", 10),\n      firstName: \"John\",\n      lastName: \"Smith\",\n      role: \"teacher\",\n      avatar: null,\n      createdAt: new Date(),\n    };\n    this.users.set(teacherId, teacher);\n\n    // Create sample quizzes\n    const quizzes = [\n      {\n        id: randomUUID(),\n        title: \"Present Tenses\",\n        description: \"Master the use of simple present, present continuous, and present perfect tenses.\",\n        difficulty: \"beginner\",\n        category: \"tenses\",\n        timeLimit: 10,\n        questions: [\n          {\n            id: 1,\n            question: \"She _______ to work every morning at 8 AM.\",\n            options: [\"go\", \"goes\", \"going\", \"went\"],\n            correctAnswer: 1,\n            explanation: \"With third person singular (she/he/it) in simple present, we add 's' to the verb.\"\n          },\n          {\n            id: 2,\n            question: \"They _______ studying English for two years.\",\n            options: [\"are\", \"have been\", \"were\", \"had been\"],\n            correctAnswer: 1,\n            explanation: \"Present perfect continuous shows an action that started in the past and continues to the present.\"\n          }\n        ],\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Conditional Sentences\",\n        description: \"Learn about zero, first, second, and third conditional structures.\",\n        difficulty: \"intermediate\",\n        category: \"conditionals\",\n        timeLimit: 15,\n        questions: [\n          {\n            id: 1,\n            question: \"If it _______ tomorrow, we will stay inside.\",\n            options: [\"rain\", \"rains\", \"will rain\", \"rained\"],\n            correctAnswer: 1,\n            explanation: \"In first conditional, we use simple present in the if-clause and will + infinitive in the main clause.\"\n          }\n        ],\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Advanced Grammar\",\n        description: \"Challenge yourself with complex grammatical structures and rules.\",\n        difficulty: \"advanced\",\n        category: \"advanced\",\n        timeLimit: 20,\n        questions: [\n          {\n            id: 1,\n            question: \"_______ the meeting been postponed, we would have had more time to prepare.\",\n            options: [\"Had\", \"If\", \"Should\", \"Were\"],\n            correctAnswer: 0,\n            explanation: \"This is an inverted third conditional structure, where 'had' is moved to the beginning instead of using 'if'.\"\n          }\n        ],\n        createdAt: new Date(),\n      }\n    ];\n\n    quizzes.forEach(quiz => this.quizzes.set(quiz.id, quiz));\n\n    // Create sample resources\n    const resources = [\n      {\n        id: randomUUID(),\n        title: \"Complete Tenses Guide\",\n        description: \"Comprehensive guide covering all English tenses with examples and usage rules.\",\n        type: \"pdf\",\n        category: \"grammar-guide\",\n        url: \"/resources/tenses-guide.pdf\",\n        isPremium: false,\n        fileSize: 2048576, // 2MB\n        duration: null,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Mastering Conditionals\",\n        description: \"Step-by-step video explanation of all conditional sentence types with practical examples.\",\n        type: \"video\",\n        category: \"video-lesson\",\n        url: \"/resources/conditionals-video.mp4\",\n        isPremium: true,\n        fileSize: 52428800, // 50MB\n        duration: 2700, // 45 minutes\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Article Usage Practice\",\n        description: \"Practice exercises for mastering the correct usage of articles (a, an, the).\",\n        type: \"worksheet\",\n        category: \"practice\",\n        url: \"/resources/articles-worksheet.pdf\",\n        isPremium: false,\n        fileSize: 1048576, // 1MB\n        duration: null,\n        createdAt: new Date(),\n      }\n    ];\n\n    resources.forEach(resource => this.resources.set(resource.id, resource));\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user: User = { \n      ...insertUser, \n      id, \n      password: hashedPassword,\n      createdAt: new Date()\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getQuizzes(): Promise<Quiz[]> {\n    return Array.from(this.quizzes.values());\n  }\n\n  async getQuiz(id: string): Promise<Quiz | undefined> {\n    return this.quizzes.get(id);\n  }\n\n  async createQuiz(insertQuiz: InsertQuiz): Promise<Quiz> {\n    const id = randomUUID();\n    const quiz: Quiz = { ...insertQuiz, id, createdAt: new Date() };\n    this.quizzes.set(id, quiz);\n    return quiz;\n  }\n\n  async getQuizResults(userId: string): Promise<QuizResult[]> {\n    return Array.from(this.quizResults.values()).filter(result => result.userId === userId);\n  }\n\n  async createQuizResult(insertResult: InsertQuizResult): Promise<QuizResult> {\n    const id = randomUUID();\n    const result: QuizResult = { ...insertResult, id, completedAt: new Date() };\n    this.quizResults.set(id, result);\n    return result;\n  }\n\n  async getLessons(userId: string): Promise<Lesson[]> {\n    return Array.from(this.lessons.values()).filter(lesson => \n      lesson.studentId === userId || lesson.teacherId === userId\n    );\n  }\n\n  async createLesson(insertLesson: InsertLesson): Promise<Lesson> {\n    const id = randomUUID();\n    const lesson: Lesson = { ...insertLesson, id, createdAt: new Date() };\n    this.lessons.set(id, lesson);\n    return lesson;\n  }\n\n  async updateLesson(id: string, updates: Partial<Lesson>): Promise<Lesson | undefined> {\n    const lesson = this.lessons.get(id);\n    if (!lesson) return undefined;\n    \n    const updatedLesson = { ...lesson, ...updates };\n    this.lessons.set(id, updatedLesson);\n    return updatedLesson;\n  }\n\n  async getResources(): Promise<Resource[]> {\n    return Array.from(this.resources.values());\n  }\n\n  async createResource(insertResource: InsertResource): Promise<Resource> {\n    const id = randomUUID();\n    const resource: Resource = { ...insertResource, id, createdAt: new Date() };\n    this.resources.set(id, resource);\n    return resource;\n  }\n\n  async getForumPosts(): Promise<ForumPost[]> {\n    return Array.from(this.forumPosts.values());\n  }\n\n  async createForumPost(insertPost: InsertForumPost): Promise<ForumPost> {\n    const id = randomUUID();\n    const post: ForumPost = { ...insertPost, id, replies: 0, createdAt: new Date() };\n    this.forumPosts.set(id, post);\n    return post;\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = { ...insertMessage, id, status: \"new\", createdAt: new Date() };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n}\n\n// PostgreSQL Storage implementation\nexport class PostgreSQLStorage implements IStorage {\n  private db;\n\n  constructor() {\n    if (!process.env.DATABASE_URL) {\n      throw new Error(\"DATABASE_URL environment variable is required\");\n    }\n    \n    console.log(\"DATABASE_URL format:\", process.env.DATABASE_URL?.substring(0, 20) + \"...\");\n    \n    try {\n      let connectionString = process.env.DATABASE_URL;\n      \n      // Convert HTTPS URL to PostgreSQL URL format if needed\n      if (connectionString.startsWith('https://')) {\n        console.log(\"Converting HTTPS URL to PostgreSQL format...\");\n        // This is likely a Supabase HTTP URL, we need the PostgreSQL connection string instead\n        throw new Error(\"Please provide the PostgreSQL connection string from Supabase, not the HTTP URL. Go to your Supabase project settings > Database > Connection string > PostgreSQL\");\n      }\n      \n      const sql = neon(connectionString);\n      this.db = drizzle(sql);\n      \n      // Initialize with seed data\n      this.initializeDatabase();\n    } catch (error) {\n      console.error(\"Database connection error:\", error);\n      console.log(\"DATABASE_URL should be in format: postgresql://user:password@host.tld/dbname\");\n      throw error;\n    }\n  }\n\n  private async initializeDatabase() {\n    try {\n      // Run migrations first\n      await this.runMigrations();\n      // Then seed data\n      await this.seedData();\n    } catch (error) {\n      console.error(\"Database initialization error:\", error);\n    }\n  }\n\n  private async runMigrations() {\n    try {\n      // Check if tables exist by trying to select from users table\n      await this.db.select().from(users).limit(1);\n      console.log(\"Database tables already exist\");\n    } catch (error) {\n      console.log(\"Running database migrations...\");\n      try {\n        const migrationPath = path.join(process.cwd(), \"migrations\", \"0000_even_mandarin.sql\");\n        const migrationSQL = fs.readFileSync(migrationPath, \"utf-8\");\n        \n        // Split SQL statements and execute them\n        const statements = migrationSQL\n          .split(\"--> statement-breakpoint\")\n          .map(stmt => stmt.trim())\n          .filter(stmt => stmt.length > 0);\n\n        const sql = neon(process.env.DATABASE_URL!);\n        \n        for (const statement of statements) {\n          if (statement.trim()) {\n            await sql(statement);\n          }\n        }\n        \n        console.log(\"Database migrations completed successfully\");\n      } catch (migrationError) {\n        console.error(\"Migration failed:\", migrationError);\n        throw migrationError;\n      }\n    }\n  }\n\n  private async seedData() {\n    try {\n      // Check if we have any users\n      const existingUsers = await this.db.select().from(users).limit(1);\n      \n      if (existingUsers.length === 0) {\n        // Create default teacher\n        const teacherId = randomUUID();\n        const teacher: InsertUser = {\n          username: \"teacher\",\n          email: \"teacher@grammarmaster.com\",\n          password: await bcrypt.hash(\"password\", 10),\n          firstName: \"John\",\n          lastName: \"Smith\",\n          role: \"teacher\",\n          avatar: null,\n        };\n        \n        await this.db.insert(users).values({ ...teacher, id: teacherId });\n\n        // Create sample quizzes\n        const sampleQuizzes = [\n          {\n            id: randomUUID(),\n            title: \"Present Tenses\",\n            description: \"Master the use of simple present, present continuous, and present perfect tenses.\",\n            difficulty: \"beginner\",\n            category: \"tenses\",\n            timeLimit: 10,\n            questions: [\n              {\n                id: 1,\n                question: \"She _______ to work every morning at 8 AM.\",\n                options: [\"go\", \"goes\", \"going\", \"went\"],\n                correctAnswer: 1,\n                explanation: \"With third person singular (she/he/it) in simple present, we add 's' to the verb.\"\n              },\n              {\n                id: 2,\n                question: \"They _______ studying English for two years.\",\n                options: [\"are\", \"have been\", \"were\", \"had been\"],\n                correctAnswer: 1,\n                explanation: \"Present perfect continuous shows an action that started in the past and continues to the present.\"\n              }\n            ],\n          },\n          {\n            id: randomUUID(),\n            title: \"Conditional Sentences\",\n            description: \"Learn about zero, first, second, and third conditional structures.\",\n            difficulty: \"intermediate\",\n            category: \"conditionals\",\n            timeLimit: 15,\n            questions: [\n              {\n                id: 1,\n                question: \"If it _______ tomorrow, we will stay inside.\",\n                options: [\"rain\", \"rains\", \"will rain\", \"rained\"],\n                correctAnswer: 1,\n                explanation: \"In first conditional, we use simple present in the if-clause and will + infinitive in the main clause.\"\n              }\n            ],\n          },\n          {\n            id: randomUUID(),\n            title: \"Advanced Grammar\",\n            description: \"Challenge yourself with complex grammatical structures and rules.\",\n            difficulty: \"advanced\",\n            category: \"advanced\",\n            timeLimit: 20,\n            questions: [\n              {\n                id: 1,\n                question: \"_______ the meeting been postponed, we would have had more time to prepare.\",\n                options: [\"Had\", \"If\", \"Should\", \"Were\"],\n                correctAnswer: 0,\n                explanation: \"This is an inverted third conditional structure, where 'had' is moved to the beginning instead of using 'if'.\"\n              }\n            ],\n          }\n        ];\n\n        await this.db.insert(quizzes).values(sampleQuizzes);\n\n        // Create sample resources\n        const sampleResources = [\n          {\n            id: randomUUID(),\n            title: \"Complete Tenses Guide\",\n            description: \"Comprehensive guide covering all English tenses with examples and usage rules.\",\n            type: \"pdf\",\n            category: \"grammar-guide\",\n            url: \"/resources/tenses-guide.pdf\",\n            isPremium: false,\n            fileSize: 2048576,\n            duration: null,\n          },\n          {\n            id: randomUUID(),\n            title: \"Mastering Conditionals\",\n            description: \"Step-by-step video explanation of all conditional sentence types with practical examples.\",\n            type: \"video\",\n            category: \"video-lesson\",\n            url: \"/resources/conditionals-video.mp4\",\n            isPremium: true,\n            fileSize: 52428800,\n            duration: 2700,\n          },\n          {\n            id: randomUUID(),\n            title: \"Article Usage Practice\",\n            description: \"Practice exercises for mastering the correct usage of articles (a, an, the).\",\n            type: \"worksheet\",\n            category: \"practice\",\n            url: \"/resources/articles-worksheet.pdf\",\n            isPremium: false,\n            fileSize: 1048576,\n            duration: null,\n          }\n        ];\n\n        await this.db.insert(resources).values(sampleResources);\n      }\n    } catch (error) {\n      console.error(\"Error seeding data:\", error);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await this.db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const userData = { \n      ...insertUser, \n      id, \n      password: hashedPassword\n    };\n    \n    const result = await this.db.insert(users).values(userData).returning();\n    return result[0];\n  }\n\n  async getQuizzes(): Promise<Quiz[]> {\n    return await this.db.select().from(quizzes);\n  }\n\n  async getQuiz(id: string): Promise<Quiz | undefined> {\n    const result = await this.db.select().from(quizzes).where(eq(quizzes.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createQuiz(insertQuiz: InsertQuiz): Promise<Quiz> {\n    const id = randomUUID();\n    const quizData = { ...insertQuiz, id };\n    const result = await this.db.insert(quizzes).values(quizData).returning();\n    return result[0];\n  }\n\n  async getQuizResults(userId: string): Promise<QuizResult[]> {\n    return await this.db.select().from(quizResults).where(eq(quizResults.userId, userId));\n  }\n\n  async createQuizResult(insertResult: InsertQuizResult): Promise<QuizResult> {\n    const id = randomUUID();\n    const resultData = { ...insertResult, id };\n    const result = await this.db.insert(quizResults).values(resultData).returning();\n    return result[0];\n  }\n\n  async getLessons(userId: string): Promise<Lesson[]> {\n    return await this.db.select().from(lessons).where(eq(lessons.studentId, userId));\n  }\n\n  async createLesson(insertLesson: InsertLesson): Promise<Lesson> {\n    const id = randomUUID();\n    const lessonData = { ...insertLesson, id };\n    const result = await this.db.insert(lessons).values(lessonData).returning();\n    return result[0];\n  }\n\n  async updateLesson(id: string, updates: Partial<Lesson>): Promise<Lesson | undefined> {\n    const result = await this.db.update(lessons).set(updates).where(eq(lessons.id, id)).returning();\n    return result[0];\n  }\n\n  async getResources(): Promise<Resource[]> {\n    return await this.db.select().from(resources);\n  }\n\n  async createResource(insertResource: InsertResource): Promise<Resource> {\n    const id = randomUUID();\n    const resourceData = { ...insertResource, id };\n    const result = await this.db.insert(resources).values(resourceData).returning();\n    return result[0];\n  }\n\n  async getForumPosts(): Promise<ForumPost[]> {\n    return await this.db.select().from(forumPosts);\n  }\n\n  async createForumPost(insertPost: InsertForumPost): Promise<ForumPost> {\n    const id = randomUUID();\n    const postData = { ...insertPost, id, replies: 0 };\n    const result = await this.db.insert(forumPosts).values(postData).returning();\n    return result[0];\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const messageData = { ...insertMessage, id, status: \"new\" };\n    const result = await this.db.insert(contactMessages).values(messageData).returning();\n    return result[0];\n  }\n}\n\n// Initialize storage with fallback to MemStorage if database connection fails\nfunction initializeStorage(): IStorage {\n  if (!process.env.DATABASE_URL) {\n    console.log(\"No DATABASE_URL provided, using in-memory storage\");\n    return new MemStorage();\n  }\n  \n  try {\n    console.log(\"Attempting to connect to PostgreSQL database...\");\n    return new PostgreSQLStorage();\n  } catch (error) {\n    console.error(\"Failed to connect to database, falling back to in-memory storage:\", error);\n    console.log(\"To use PostgreSQL, please provide a valid DATABASE_URL in postgresql:// format\");\n    return new MemStorage();\n  }\n}\n\nexport const storage = initializeStorage();\n","size_bytes":21504},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull().default(\"student\"), // student, teacher\n  avatar: text(\"avatar\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const quizzes = pgTable(\"quizzes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  difficulty: text(\"difficulty\").notNull(), // beginner, intermediate, advanced\n  category: text(\"category\").notNull(),\n  questions: jsonb(\"questions\").notNull(), // Array of question objects\n  timeLimit: integer(\"time_limit\").notNull(), // in minutes\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const quizResults = pgTable(\"quiz_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  quizId: varchar(\"quiz_id\").references(() => quizzes.id).notNull(),\n  score: integer(\"score\").notNull(),\n  totalQuestions: integer(\"total_questions\").notNull(),\n  answers: jsonb(\"answers\").notNull(), // Array of user answers\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n});\n\nexport const lessons = pgTable(\"lessons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => users.id).notNull(),\n  teacherId: varchar(\"teacher_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // private, group, intensive\n  focusArea: text(\"focus_area\").notNull(),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, completed, cancelled\n  notes: text(\"notes\"),\n  price: integer(\"price\").notNull(), // in cents\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const resources = pgTable(\"resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // pdf, video, worksheet, guide\n  category: text(\"category\").notNull(),\n  url: text(\"url\").notNull(),\n  isPremium: boolean(\"is_premium\").default(false),\n  fileSize: integer(\"file_size\"), // in bytes\n  duration: integer(\"duration\"), // for videos, in seconds\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const forumPosts = pgTable(\"forum_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  category: text(\"category\").notNull(),\n  replies: integer(\"replies\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"new\"), // new, read, replied\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuizSchema = createInsertSchema(quizzes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuizResultSchema = createInsertSchema(quizResults).omit({\n  id: true,\n  completedAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertForumPostSchema = createInsertSchema(forumPosts).omit({\n  id: true,\n  replies: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n});\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Quiz = typeof quizzes.$inferSelect;\nexport type InsertQuiz = z.infer<typeof insertQuizSchema>;\nexport type QuizResult = typeof quizResults.$inferSelect;\nexport type InsertQuizResult = z.infer<typeof insertQuizResultSchema>;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type Resource = typeof resources.$inferSelect;\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type ForumPost = typeof forumPosts.$inferSelect;\nexport type InsertForumPost = z.infer<typeof insertForumPostSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\n","size_bytes":5965},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Navbar } from \"@/components/navbar\";\nimport { useAuth } from \"@/lib/auth\";\nimport HomePage from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport QuizPage from \"@/pages/quiz\";\nimport LoginPage from \"@/pages/login\";\nimport RegisterPage from \"@/pages/register\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <LoginPage />;\n  }\n  \n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/register\" component={RegisterPage} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/quiz/:id\">\n        {(params) => (\n          <ProtectedRoute>\n            <QuizPage quizId={params.id} />\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"grammar-master-theme\">\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-background\">\n            <Navbar />\n            <Router />\n            <Toaster />\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1837},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-50: hsl(214, 100%, 97%);\n  --primary-600: hsl(217, 91%, 60%);\n  --primary-700: hsl(217, 91%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(217, 91%, 60%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(217, 91%, 60%);\n  --success-50: hsl(151, 55%, 96%);\n  --success-500: hsl(159, 64%, 34%);\n  --success-600: hsl(159, 64%, 28%);\n  --warning-50: hsl(54, 91%, 95%);\n  --warning-500: hsl(38, 92%, 50%);\n  --warning-600: hsl(32, 95%, 44%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(159, 64%, 34%);\n  --chart-3: hsl(38, 92%, 50%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(217, 91%, 60%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-50: hsl(217, 32%, 17%);\n  --primary-600: hsl(217, 91%, 60%);\n  --primary-700: hsl(217, 91%, 70%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(212.7, 26.8%, 83.9%);\n  --success-50: hsl(151, 30%, 15%);\n  --success-500: hsl(159, 64%, 40%);\n  --success-600: hsl(159, 64%, 45%);\n  --warning-50: hsl(54, 30%, 15%);\n  --warning-500: hsl(38, 92%, 60%);\n  --warning-600: hsl(32, 95%, 65%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background-color: rgba(255, 255, 255, 0.8);\n  }\n  \n  .dark .glass-effect {\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.5s ease-in;\n  }\n  \n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  .quiz-option:hover {\n    transform: translateY(-1px);\n  }\n  \n  .progress-ring {\n    transition: stroke-dasharray 0.35s;\n  }\n}\n","size_bytes":3899},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/auth-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { loginSchema, registerSchema, type LoginData, type RegisterData } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { X } from \"lucide-react\";\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialMode?: \"login\" | \"register\";\n}\n\nexport function AuthModal({ isOpen, onClose, initialMode = \"login\" }: AuthModalProps) {\n  const [mode, setMode] = useState<\"login\" | \"register\">(initialMode);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"student\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      login(data.user, data.token);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been successfully logged in.\",\n      });\n      onClose();\n      loginForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      login(data.user, data.token);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to Grammar Master. Your account has been created successfully.\",\n      });\n      onClose();\n      registerForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    onClose();\n    loginForm.reset();\n    registerForm.reset();\n    setMode(initialMode);\n  };\n\n  const switchMode = () => {\n    setMode(mode === \"login\" ? \"register\" : \"login\");\n    loginForm.reset();\n    registerForm.reset();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"w-full max-w-md mx-4\">\n        <DialogHeader>\n          <div className=\"flex justify-between items-center\">\n            <DialogTitle data-testid=\"auth-title\">\n              {mode === \"login\" ? \"Welcome Back\" : \"Create Account\"}\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleClose}\n              data-testid=\"close-auth-modal\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        {mode === \"login\" ? (\n          <Form {...loginForm}>\n            <form\n              onSubmit={loginForm.handleSubmit((data) => loginMutation.mutate(data))}\n              className=\"space-y-6\"\n              data-testid=\"login-form\"\n            >\n              <FormField\n                control={loginForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"your@email.com\"\n                        {...field}\n                        data-testid=\"login-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={loginForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        {...field}\n                        data-testid=\"login-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"login-submit\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n              <div className=\"text-center\">\n                <span className=\"text-muted-foreground\">Don't have an account? </span>\n                <Button\n                  type=\"button\"\n                  variant=\"link\"\n                  className=\"p-0\"\n                  onClick={switchMode}\n                  data-testid=\"switch-to-register\"\n                >\n                  Sign up\n                </Button>\n              </div>\n            </form>\n          </Form>\n        ) : (\n          <Form {...registerForm}>\n            <form\n              onSubmit={registerForm.handleSubmit((data) => registerMutation.mutate(data))}\n              className=\"space-y-6\"\n              data-testid=\"register-form\"\n            >\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={registerForm.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John\" {...field} data-testid=\"register-firstname\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={registerForm.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Doe\" {...field} data-testid=\"register-lastname\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={registerForm.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"johndoe\" {...field} data-testid=\"register-username\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={registerForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"your@email.com\"\n                        {...field}\n                        data-testid=\"register-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={registerForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        {...field}\n                        data-testid=\"register-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={registerForm.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        {...field}\n                        data-testid=\"register-confirm-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={registerForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>I am a...</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"register-role\">\n                          <SelectValue placeholder=\"Select your role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"student\">Student</SelectItem>\n                        <SelectItem value=\"teacher\">Teacher</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n                data-testid=\"register-submit\"\n              >\n                {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n              <div className=\"text-center\">\n                <span className=\"text-muted-foreground\">Already have an account? </span>\n                <Button\n                  type=\"button\"\n                  variant=\"link\"\n                  className=\"p-0\"\n                  onClick={switchMode}\n                  data-testid=\"switch-to-login\"\n                >\n                  Sign in\n                </Button>\n              </div>\n            </form>\n          </Form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11723},"client/src/components/booking-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { insertLessonSchema, type InsertLesson } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { X, ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst timeSlots = [\n  \"9:00 AM\",\n  \"10:30 AM\",\n  \"2:00 PM\",\n  \"3:30 PM\",\n  \"5:00 PM\",\n  \"7:00 PM\",\n];\n\nconst lessonTypes = [\n  { value: \"private\", label: \"Private Lesson (1-on-1)\", price: 45 },\n  { value: \"group\", label: \"Group Lesson (2-6 students)\", price: 25 },\n  { value: \"intensive\", label: \"Intensive Session\", price: 70 },\n];\n\nconst focusAreas = [\n  \"General Grammar\",\n  \"Tenses\",\n  \"Articles\",\n  \"Conditionals\",\n  \"Passive Voice\",\n  \"Other (specify in notes)\",\n];\n\nexport function BookingModal({ isOpen, onClose }: BookingModalProps) {\n  const [selectedDate, setSelectedDate] = useState<Date>();\n  const [selectedTime, setSelectedTime] = useState<string>(\"\");\n  const { user, getAuthHeaders } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm({\n    resolver: zodResolver(insertLessonSchema.omit({ studentId: true, teacherId: true, scheduledAt: true })),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      type: \"private\",\n      focusArea: \"General Grammar\",\n      duration: 60,\n      price: 4500, // in cents\n      notes: \"\",\n    },\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (!selectedDate || !selectedTime) {\n        throw new Error(\"Please select date and time\");\n      }\n\n      // Create scheduled date/time\n      const [time, period] = selectedTime.split(\" \");\n      const [hours, minutes] = time.split(\":\");\n      let hour = parseInt(hours);\n      if (period === \"PM\" && hour !== 12) hour += 12;\n      if (period === \"AM\" && hour === 12) hour = 0;\n\n      const scheduledAt = new Date(selectedDate);\n      scheduledAt.setHours(hour, parseInt(minutes || \"0\"), 0, 0);\n\n      const lessonData = {\n        ...data,\n        teacherId: \"teacher-id\", // In real app, this would come from teacher selection\n        scheduledAt: scheduledAt.toISOString(),\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/lessons\", lessonData, getAuthHeaders());\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Lesson booked!\",\n        description: \"Your lesson has been successfully booked. You will receive a confirmation email shortly.\",\n      });\n      onClose();\n      form.reset();\n      setSelectedDate(undefined);\n      setSelectedTime(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking failed\",\n        description: error.message || \"Failed to book lesson\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    onClose();\n    form.reset();\n    setSelectedDate(undefined);\n    setSelectedTime(\"\");\n  };\n\n  const selectedLessonType = lessonTypes.find(type => type.value === form.watch(\"type\"));\n  const price = selectedLessonType?.price || 45;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex justify-between items-center\">\n            <DialogTitle data-testid=\"booking-title\">Book a Lesson</DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleClose}\n              data-testid=\"close-booking-modal\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Calendar Section */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Select Date & Time</h3>\n            <div className=\"bg-muted rounded-xl p-6\">\n              <Calendar\n                mode=\"single\"\n                selected={selectedDate}\n                onSelect={setSelectedDate}\n                disabled={(date) => date < new Date() || date.getDay() === 0} // Disable past dates and Sundays\n                className=\"rounded-md border\"\n                data-testid=\"booking-calendar\"\n              />\n              \n              {selectedDate && (\n                <div className=\"mt-6\">\n                  <h5 className=\"text-sm font-medium mb-3\">\n                    Available Times ({selectedDate.toLocaleDateString()})\n                  </h5>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    {timeSlots.map((time) => (\n                      <Button\n                        key={time}\n                        variant={selectedTime === time ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setSelectedTime(time)}\n                        data-testid={`time-slot-${time.replace(/[:\\s]/g, \"\").toLowerCase()}`}\n                      >\n                        {time}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Booking Details */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Lesson Details</h3>\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit((data) => bookingMutation.mutate(data))}\n                className=\"space-y-6\"\n                data-testid=\"booking-form\"\n              >\n                <FormField\n                  control={form.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Lesson Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"booking-type\">\n                            <SelectValue placeholder=\"Select lesson type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {lessonTypes.map((type) => (\n                            <SelectItem key={type.value} value={type.value}>\n                              {type.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"focusArea\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Focus Area</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"booking-focus\">\n                            <SelectValue placeholder=\"Select focus area\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {focusAreas.map((area) => (\n                            <SelectItem key={area} value={area}>\n                              {area}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Special Notes</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Any specific topics you'd like to focus on or questions you have...\"\n                          rows={3}\n                          {...field}\n                          data-testid=\"booking-notes\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Booking Summary */}\n                <div className=\"bg-muted rounded-lg p-6\">\n                  <h4 className=\"font-semibold mb-4\">Booking Summary</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Date:</span>\n                      <span className=\"font-medium\">\n                        {selectedDate ? selectedDate.toLocaleDateString() : \"Not selected\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Time:</span>\n                      <span className=\"font-medium\">\n                        {selectedTime ? `${selectedTime} - ${new Date(new Date().setHours(new Date().getHours() + 1)).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })}` : \"Not selected\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Duration:</span>\n                      <span className=\"font-medium\">60 minutes</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Type:</span>\n                      <span className=\"font-medium\">{selectedLessonType?.label}</span>\n                    </div>\n                    <div className=\"flex justify-between border-t border-border pt-2 mt-3\">\n                      <span className=\"font-semibold\">Total:</span>\n                      <span className=\"font-bold text-primary\">${price}.00</span>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={bookingMutation.isPending || !selectedDate || !selectedTime}\n                  data-testid=\"confirm-booking\"\n                >\n                  {bookingMutation.isPending ? \"Booking...\" : \"Confirm Booking\"}\n                </Button>\n              </form>\n            </Form>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11340},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { GraduationCap, Moon, Sun, Menu, X } from \"lucide-react\";\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const { isAuthenticated, user, logout } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const handleLogout = () => {\n    logout();\n    setMobileMenuOpen(false);\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\", id: \"home\" },\n    { href: \"/#about\", label: \"About\", id: \"about\" },\n    { href: \"/#resources\", label: \"Resources\", id: \"resources\" },\n    { href: \"/#contact\", label: \"Contact\", id: \"contact\" },\n  ];\n\n  return (\n    <nav className=\"bg-background shadow-sm sticky top-0 z-50 border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Link \n              href=\"/\" \n              className=\"flex items-center\"\n              data-testid=\"logo-link\"\n            >\n              <GraduationCap className=\"text-primary-600 text-2xl mr-2\" />\n              <span className=\"text-xl font-bold text-foreground\">Grammar Master</span>\n            </Link>\n          </div>\n          \n          <div className=\"hidden md:block\">\n            <div className=\"ml-10 flex items-baseline space-x-4\">\n              {navLinks.map((link) => (\n                <Link\n                  key={link.id}\n                  href={link.href}\n                  className={`px-3 py-2 text-sm font-medium transition-colors ${\n                    location === link.href\n                      ? \"text-foreground\"\n                      : \"text-muted-foreground hover:text-foreground\"\n                  }`}\n                  data-testid={`nav-${link.id}`}\n                >\n                  {link.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              aria-label=\"Toggle theme\"\n              data-testid=\"theme-toggle\"\n            >\n              {theme === \"dark\" ? (\n                <Sun className=\"h-5 w-5\" />\n              ) : (\n                <Moon className=\"h-5 w-5\" />\n              )}\n            </Button>\n            \n            {isAuthenticated ? (\n              <div className=\"hidden md:flex items-center space-x-2\">\n                <Link href=\"/dashboard\">\n                  <Button variant=\"ghost\" data-testid=\"dashboard-link\">\n                    Dashboard\n                  </Button>\n                </Link>\n                <Button \n                  variant=\"ghost\" \n                  onClick={handleLogout}\n                  data-testid=\"logout-button\"\n                >\n                  Logout\n                </Button>\n                <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center text-white font-semibold\">\n                  {user?.firstName?.[0] || \"U\"}\n                </div>\n              </div>\n            ) : (\n              <div className=\"hidden md:flex items-center space-x-2\">\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" data-testid=\"login-button\">\n                    Login\n                  </Button>\n                </Link>\n                <Link href=\"/register\">\n                  <Button data-testid=\"signup-button\">\n                    Sign Up\n                  </Button>\n                </Link>\n              </div>\n            )}\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"mobile-menu-toggle\"\n            >\n              {mobileMenuOpen ? (\n                <X className=\"h-5 w-5\" />\n              ) : (\n                <Menu className=\"h-5 w-5\" />\n              )}\n            </Button>\n          </div>\n        </div>\n        \n        {mobileMenuOpen && (\n          <div className=\"md:hidden pb-4\">\n            <div className=\"flex flex-col space-y-2\">\n              {navLinks.map((link) => (\n                <Link\n                  key={link.id}\n                  href={link.href}\n                  className=\"text-muted-foreground block px-3 py-2 text-sm font-medium\"\n                  onClick={() => setMobileMenuOpen(false)}\n                  data-testid={`mobile-nav-${link.id}`}\n                >\n                  {link.label}\n                </Link>\n              ))}\n              {isAuthenticated ? (\n                <div className=\"flex flex-col space-y-2 px-3 pt-2\">\n                  <Link href=\"/dashboard\">\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start\"\n                      onClick={() => setMobileMenuOpen(false)}\n                      data-testid=\"mobile-dashboard-link\"\n                    >\n                      Dashboard\n                    </Button>\n                  </Link>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start\"\n                    onClick={handleLogout}\n                    data-testid=\"mobile-logout-button\"\n                  >\n                    Logout\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"flex space-x-2 px-3 pt-2\">\n                  <Link href=\"/login\">\n                    <Button \n                      variant=\"ghost\" \n                      className=\"flex-1\"\n                      onClick={() => setMobileMenuOpen(false)}\n                      data-testid=\"mobile-login-button\"\n                    >\n                      Login\n                    </Button>\n                  </Link>\n                  <Link href=\"/register\">\n                    <Button \n                      className=\"flex-1\"\n                      onClick={() => setMobileMenuOpen(false)}\n                      data-testid=\"mobile-signup-button\"\n                    >\n                      Sign Up\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":6661},"client/src/components/quiz-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { X, Clock, ArrowLeft, ArrowRight } from \"lucide-react\";\n\ninterface Question {\n  id: number;\n  question: string;\n  options: string[];\n  correctAnswer: number;\n  explanation: string;\n}\n\ninterface QuizInterfaceProps {\n  quizId: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function QuizInterface({ quizId, isOpen, onClose }: QuizInterfaceProps) {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState<Record<number, number>>({});\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [showResults, setShowResults] = useState(false);\n  const { getAuthHeaders } = useAuth();\n  const { toast } = useToast();\n\n  const { data: quiz, isLoading } = useQuery({\n    queryKey: [\"/api/quizzes\", quizId],\n    enabled: isOpen && !!quizId,\n  });\n\n  const submitQuizMutation = useMutation({\n    mutationFn: async (answers: Record<number, number>) => {\n      const score = calculateScore(answers);\n      const quizData = {\n        quizId,\n        score,\n        totalQuestions: quiz.questions.length,\n        answers: Object.entries(answers).map(([questionId, answer]) => ({\n          questionId: parseInt(questionId),\n          answer,\n          correct: quiz.questions.find((q: Question) => q.id === parseInt(questionId))?.correctAnswer === answer,\n        })),\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/quiz-results\", quizData, getAuthHeaders());\n      return response.json();\n    },\n    onSuccess: (result) => {\n      setShowResults(true);\n      toast({\n        title: \"Quiz completed!\",\n        description: `You scored ${result.score} out of ${result.totalQuestions}.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error submitting quiz\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Timer effect\n  useEffect(() => {\n    if (!quiz || !isOpen) return;\n\n    setTimeRemaining(quiz.timeLimit * 60); // Convert minutes to seconds\n\n    const timer = setInterval(() => {\n      setTimeRemaining((prev) => {\n        if (prev <= 1) {\n          // Auto-submit when time runs out\n          submitQuizMutation.mutate(answers);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [quiz, isOpen]);\n\n  const calculateScore = (userAnswers: Record<number, number>) => {\n    if (!quiz) return 0;\n    let correct = 0;\n    quiz.questions.forEach((question: Question) => {\n      if (userAnswers[question.id] === question.correctAnswer) {\n        correct++;\n      }\n    });\n    return correct;\n  };\n\n  const handleAnswerSelect = (questionId: number, answerIndex: number) => {\n    setAnswers(prev => ({ ...prev, [questionId]: answerIndex }));\n  };\n\n  const nextQuestion = () => {\n    if (currentQuestion < quiz.questions.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n    }\n  };\n\n  const previousQuestion = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(prev => prev - 1);\n    }\n  };\n\n  const finishQuiz = () => {\n    submitQuizMutation.mutate(answers);\n  };\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleClose = () => {\n    onClose();\n    setCurrentQuestion(0);\n    setAnswers({});\n    setShowResults(false);\n  };\n\n  if (!isOpen) return null;\n\n  if (isLoading) {\n    return (\n      <div className=\"fixed inset-0 bg-background z-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Loading quiz...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!quiz) return null;\n\n  const currentQ = quiz.questions[currentQuestion];\n  const progress = ((currentQuestion + 1) / quiz.questions.length) * 100;\n\n  if (showResults) {\n    const score = calculateScore(answers);\n    const percentage = Math.round((score / quiz.questions.length) * 100);\n\n    return (\n      <div className=\"fixed inset-0 bg-background z-50 flex items-center justify-center p-4\">\n        <div className=\"max-w-2xl w-full bg-card rounded-2xl shadow-lg p-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-3xl font-bold mb-4\">Quiz Complete!</h2>\n            <div className=\"text-6xl font-bold text-primary mb-4\">{percentage}%</div>\n            <p className=\"text-xl mb-6\">\n              You scored {score} out of {quiz.questions.length} questions correctly.\n            </p>\n            <div className=\"flex gap-4 justify-center\">\n              <Button onClick={handleClose} data-testid=\"quiz-close\">\n                Close\n              </Button>\n              <Button variant=\"outline\" onClick={() => setShowResults(false)} data-testid=\"quiz-review\">\n                Review Answers\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-background z-50\">\n      <div className=\"min-h-screen flex flex-col\">\n        {/* Quiz Header */}\n        <div className=\"bg-card shadow-sm border-b border-border\">\n          <div className=\"max-w-4xl mx-auto px-4 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={handleClose}\n                  className=\"mr-4\"\n                  data-testid=\"quiz-exit\"\n                >\n                  <X className=\"h-5 w-5\" />\n                </Button>\n                <h1 className=\"text-xl font-semibold\" data-testid=\"quiz-title\">\n                  {quiz.title}\n                </h1>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Question <span data-testid=\"current-question\">{currentQuestion + 1}</span> of{\" \"}\n                  <span data-testid=\"total-questions\">{quiz.questions.length}</span>\n                </div>\n                <div className=\"text-sm text-muted-foreground flex items-center\">\n                  <Clock className=\"h-4 w-4 mr-1\" />\n                  <span data-testid=\"quiz-timer\">{formatTime(timeRemaining)}</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <Progress value={progress} className=\"w-full\" data-testid=\"quiz-progress\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Quiz Content */}\n        <div className=\"flex-1 flex items-center justify-center p-4\">\n          <div className=\"max-w-2xl w-full\">\n            <div className=\"bg-card rounded-2xl shadow-lg p-8\">\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-semibold mb-4\" data-testid=\"question-text\">\n                  {currentQ.question}\n                </h2>\n              </div>\n\n              <div className=\"space-y-4\">\n                {currentQ.options.map((option, index) => (\n                  <label key={index} className=\"block cursor-pointer\">\n                    <input\n                      type=\"radio\"\n                      name={`question-${currentQ.id}`}\n                      value={index}\n                      className=\"sr-only\"\n                      checked={answers[currentQ.id] === index}\n                      onChange={() => handleAnswerSelect(currentQ.id, index)}\n                      data-testid={`option-${index}`}\n                    />\n                    <div\n                      className={`p-4 border-2 rounded-lg transition-colors quiz-option ${\n                        answers[currentQ.id] === index\n                          ? \"border-primary bg-primary/10\"\n                          : \"border-border hover:border-primary/50 hover:bg-primary/5\"\n                      }`}\n                    >\n                      <span className=\"font-medium\">\n                        {String.fromCharCode(65 + index)}) {option}\n                      </span>\n                    </div>\n                  </label>\n                ))}\n              </div>\n\n              <div className=\"mt-8 flex justify-between\">\n                <Button\n                  variant=\"outline\"\n                  onClick={previousQuestion}\n                  disabled={currentQuestion === 0}\n                  data-testid=\"quiz-previous\"\n                >\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Previous\n                </Button>\n                \n                {currentQuestion === quiz.questions.length - 1 ? (\n                  <Button\n                    onClick={finishQuiz}\n                    disabled={submitQuizMutation.isPending}\n                    data-testid=\"quiz-finish\"\n                  >\n                    {submitQuizMutation.isPending ? \"Submitting...\" : \"Finish Quiz\"}\n                  </Button>\n                ) : (\n                  <Button onClick={nextQuestion} data-testid=\"quiz-next\">\n                    Next Question\n                    <ArrowRight className=\"h-4 w-4 ml-2\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9767},"client/src/components/theme-provider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\ninterface ThemeProviderState {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    }\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1415},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { type User } from \"@shared/schema\";\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n}\n\nclass AuthManager {\n  private state: AuthState = {\n    user: null,\n    token: null,\n  };\n\n  private listeners: Array<(state: AuthState) => void> = [];\n\n  constructor() {\n    // Load from localStorage on initialization\n    const token = localStorage.getItem(\"auth_token\");\n    const user = localStorage.getItem(\"auth_user\");\n    \n    if (token && user) {\n      try {\n        this.state = {\n          token,\n          user: JSON.parse(user),\n        };\n      } catch (error) {\n        // Clear invalid data\n        localStorage.removeItem(\"auth_token\");\n        localStorage.removeItem(\"auth_user\");\n      }\n    }\n  }\n\n  getState(): AuthState {\n    return this.state;\n  }\n\n  subscribe(listener: (state: AuthState) => void) {\n    this.listeners.push(listener);\n    \n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  private notify() {\n    this.listeners.forEach(listener => listener(this.state));\n  }\n\n  login(user: User, token: string) {\n    this.state = { user, token };\n    localStorage.setItem(\"auth_token\", token);\n    localStorage.setItem(\"auth_user\", JSON.stringify(user));\n    this.notify();\n  }\n\n  logout() {\n    this.state = { user: null, token: null };\n    localStorage.removeItem(\"auth_token\");\n    localStorage.removeItem(\"auth_user\");\n    this.notify();\n  }\n\n  getAuthHeaders() {\n    if (!this.state.token) {\n      return {};\n    }\n    \n    return {\n      Authorization: `Bearer ${this.state.token}`,\n    };\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.state.token && !!this.state.user;\n  }\n\n  isTeacher(): boolean {\n    return this.state.user?.role === \"teacher\";\n  }\n\n  isStudent(): boolean {\n    return this.state.user?.role === \"student\";\n  }\n}\n\nexport const authManager = new AuthManager();\n\n// React hook for using auth state\nimport { useState, useEffect } from \"react\";\n\nexport function useAuth() {\n  const [authState, setAuthState] = useState(authManager.getState());\n\n  useEffect(() => {\n    const unsubscribe = authManager.subscribe(setAuthState);\n    return unsubscribe;\n  }, []);\n\n  return {\n    user: authState.user,\n    token: authState.token,\n    isAuthenticated: authManager.isAuthenticated(),\n    isTeacher: authManager.isTeacher(),\n    isStudent: authManager.isStudent(),\n    login: authManager.login.bind(authManager),\n    logout: authManager.logout.bind(authManager),\n    getAuthHeaders: authManager.getAuthHeaders.bind(authManager),\n  };\n}\n","size_bytes":2606},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { authManager } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  // Add auth headers if available\n  const authHeaders = authManager.getAuthHeaders();\n  Object.assign(headers, authHeaders);\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    // Add auth headers if available\n    const authHeaders = authManager.getAuthHeaders();\n    Object.assign(headers, authHeaders);\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1794},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Link } from \"wouter\";\nimport { BookingModal } from \"@/components/booking-modal\";\nimport { QuizInterface } from \"@/components/quiz-interface\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  BarChart3,\n  Calendar,\n  Clock,\n  BookOpen,\n  MessageCircle,\n  User,\n  TrendingUp,\n  CheckCircle,\n  Star,\n  PlayCircle,\n  Download,\n  Award,\n  Target,\n  Bell,\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user, logout } = useAuth();\n  const [bookingModalOpen, setBookingModalOpen] = useState(false);\n  const [selectedQuizId, setSelectedQuizId] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  const { data: quizzes } = useQuery({\n    queryKey: [\"/api/quizzes\"],\n  });\n\n  const { data: quizResults } = useQuery({\n    queryKey: [\"/api/quiz-results\"],\n  });\n\n  const { data: lessons } = useQuery({\n    queryKey: [\"/api/lessons\"],\n  });\n\n  const { data: resources } = useQuery({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const { data: forumPosts } = useQuery({\n    queryKey: [\"/api/forum\"],\n  });\n\n  // Calculate statistics\n  const totalQuizzes = quizzes?.length || 0;\n  const completedQuizzes = quizResults?.length || 0;\n  const averageScore = quizResults?.length \n    ? Math.round(quizResults.reduce((sum: number, result: any) => sum + ((result.score / result.totalQuestions) * 100), 0) / quizResults.length)\n    : 0;\n  const overallProgress = totalQuizzes > 0 ? Math.round((completedQuizzes / totalQuizzes) * 100) : 0;\n\n  const upcomingLessons = lessons?.filter((lesson: any) => \n    new Date(lesson.scheduledAt) > new Date() && lesson.status === 'scheduled'\n  ) || [];\n\n  const recentActivity = [\n    ...(quizResults?.slice(-3).map((result: any) => ({\n      type: 'quiz',\n      title: `Completed quiz`,\n      description: `Score: ${Math.round((result.score / result.totalQuestions) * 100)}%`,\n      time: result.completedAt,\n      icon: CheckCircle,\n    })) || []),\n    ...(lessons?.slice(-2).map((lesson: any) => ({\n      type: 'lesson',\n      title: lesson.title,\n      description: `${lesson.type} lesson`,\n      time: lesson.scheduledAt,\n      icon: Calendar,\n    })) || []),\n  ].sort((a, b) => new Date(b.time).getTime() - new Date(a.time).getTime()).slice(0, 5);\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-success-500/10 text-success-600';\n      case 'intermediate': return 'bg-warning-500/10 text-warning-600';\n      case 'advanced': return 'bg-destructive/10 text-destructive';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const startQuiz = (quizId: string) => {\n    setSelectedQuizId(quizId);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <div className=\"w-64 bg-card shadow-lg border-r border-border\">\n          <div className=\"p-6 border-b border-border\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-semibold\">\n                {user?.firstName?.[0] || \"U\"}\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"font-semibold text-foreground\">\n                  {user?.firstName} {user?.lastName}\n                </p>\n                <p className=\"text-sm text-muted-foreground capitalize\">{user?.role}</p>\n              </div>\n            </div>\n          </div>\n          \n          <nav className=\"mt-6\">\n            <div className=\"px-4 space-y-2\">\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-foreground bg-primary/10\"\n                data-testid=\"nav-overview\"\n              >\n                <BarChart3 className=\"mr-3 h-4 w-4\" />\n                Overview\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n                data-testid=\"nav-quizzes\"\n              >\n                <Target className=\"mr-3 h-4 w-4\" />\n                Quizzes\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n                data-testid=\"nav-lessons\"\n              >\n                <Calendar className=\"mr-3 h-4 w-4\" />\n                My Lessons\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n                data-testid=\"nav-resources\"\n              >\n                <BookOpen className=\"mr-3 h-4 w-4\" />\n                Resources\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n                data-testid=\"nav-forum\"\n              >\n                <MessageCircle className=\"mr-3 h-4 w-4\" />\n                Forum\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n                data-testid=\"nav-profile\"\n              >\n                <User className=\"mr-3 h-4 w-4\" />\n                Profile\n              </Button>\n            </div>\n            \n            <div className=\"mt-8 px-4\">\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n                onClick={logout}\n                data-testid=\"nav-logout\"\n              >\n                <Award className=\"mr-3 h-4 w-4\" />\n                Logout\n              </Button>\n            </div>\n          </nav>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Header */}\n          <div className=\"bg-card shadow-sm border-b border-border\">\n            <div className=\"px-8 py-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-bold text-foreground\">\n                    Welcome back, {user?.firstName}!\n                  </h1>\n                  <p className=\"text-muted-foreground\">Continue your grammar learning journey</p>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"notifications\">\n                    <Bell className=\"h-5 w-5\" />\n                    <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\"></span>\n                  </Button>\n                  <Button onClick={() => setBookingModalOpen(true)} data-testid=\"book-lesson\">\n                    Book Lesson\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Dashboard Content */}\n          <div className=\"p-8\">\n            <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-5\">\n                <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"quizzes\" data-testid=\"tab-quizzes\">Quizzes</TabsTrigger>\n                <TabsTrigger value=\"lessons\" data-testid=\"tab-lessons\">Lessons</TabsTrigger>\n                <TabsTrigger value=\"resources\" data-testid=\"tab-resources\">Resources</TabsTrigger>\n                <TabsTrigger value=\"forum\" data-testid=\"tab-forum\">Forum</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" className=\"space-y-6\">\n                {/* Stats Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium\">Overall Progress</CardTitle>\n                      <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\" data-testid=\"progress-percentage\">\n                        {overallProgress}%\n                      </div>\n                      <Progress value={overallProgress} className=\"mt-2\" />\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium\">Quizzes Completed</CardTitle>\n                      <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\" data-testid=\"completed-quizzes\">\n                        {completedQuizzes}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        out of {totalQuizzes} available\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium\">Average Score</CardTitle>\n                      <Star className=\"h-4 w-4 text-muted-foreground\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold\" data-testid=\"average-score\">\n                        {averageScore}%\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {averageScore >= 80 ? 'Excellent!' : averageScore >= 60 ? 'Good progress' : 'Keep practicing'}\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium\">Next Lesson</CardTitle>\n                      <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-lg font-semibold\" data-testid=\"next-lesson\">\n                        {upcomingLessons.length > 0 ? (\n                          <>\n                            <div>\n                              {new Date(upcomingLessons[0].scheduledAt).toLocaleDateString()}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(upcomingLessons[0].scheduledAt).toLocaleTimeString([], { \n                                hour: '2-digit', \n                                minute: '2-digit' \n                              })}\n                            </p>\n                          </>\n                        ) : (\n                          <>\n                            <div>No lessons</div>\n                            <p className=\"text-sm text-muted-foreground\">Schedule one</p>\n                          </>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Recent Activity & Recommendations */}\n                <div className=\"grid lg:grid-cols-2 gap-8\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Recent Activity</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {recentActivity.length > 0 ? (\n                          recentActivity.map((activity, index) => (\n                            <div key={index} className=\"flex items-start\">\n                              <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center mr-4 flex-shrink-0\">\n                                <activity.icon className=\"h-4 w-4 text-primary\" />\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-foreground\">\n                                  {activity.title}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {activity.description} • {new Date(activity.time).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                          ))\n                        ) : (\n                          <div className=\"text-center py-8\">\n                            <p className=\"text-muted-foreground\">No recent activity</p>\n                            <p className=\"text-sm text-muted-foreground\">Start taking quizzes to see your activity here</p>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Recommended for You</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {quizzes?.slice(0, 2).map((quiz: any) => (\n                          <div key={quiz.id} className=\"p-4 bg-primary/5 rounded-lg border border-primary/20\">\n                            <h4 className=\"font-medium text-foreground mb-2\">{quiz.title}</h4>\n                            <p className=\"text-sm text-muted-foreground mb-3\">{quiz.description}</p>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => startQuiz(quiz.id)}\n                              data-testid={`start-quiz-${quiz.id}`}\n                            >\n                              Start Practice →\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"quizzes\" className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-2xl font-bold text-foreground\">Interactive Quizzes</h2>\n                  <p className=\"text-muted-foreground\">Test your grammar knowledge</p>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {quizzes?.map((quiz: any) => (\n                    <Card key={quiz.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <Target className=\"h-8 w-8 text-primary\" />\n                          <Badge className={getDifficultyColor(quiz.difficulty)}>\n                            {quiz.difficulty}\n                          </Badge>\n                        </div>\n                        <CardTitle className=\"text-lg\">{quiz.title}</CardTitle>\n                        <CardDescription>{quiz.description}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-4\">\n                          <span>\n                            <Target className=\"inline mr-1 h-3 w-3\" />\n                            {quiz.questions?.length || 0} questions\n                          </span>\n                          <span>\n                            <Clock className=\"inline mr-1 h-3 w-3\" />\n                            {quiz.timeLimit} min\n                          </span>\n                        </div>\n                        <Button\n                          className=\"w-full\"\n                          onClick={() => startQuiz(quiz.id)}\n                          data-testid={`quiz-start-${quiz.id}`}\n                        >\n                          Start Quiz\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                {/* Quiz Results History */}\n                {quizResults && quizResults.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Recent Quiz Results</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {quizResults.slice(-5).map((result: any) => (\n                          <div key={result.id} className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                            <div>\n                              <p className=\"font-medium text-foreground\">Quiz Result</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {new Date(result.completedAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <div className=\"text-right\">\n                              <Badge className={\n                                (result.score / result.totalQuestions) >= 0.8 \n                                  ? \"bg-success-500/10 text-success-600\"\n                                  : (result.score / result.totalQuestions) >= 0.6\n                                  ? \"bg-warning-500/10 text-warning-600\"\n                                  : \"bg-destructive/10 text-destructive\"\n                              }>\n                                {Math.round((result.score / result.totalQuestions) * 100)}%\n                              </Badge>\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                {result.score}/{result.totalQuestions}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"lessons\" className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-2xl font-bold text-foreground\">My Lessons</h2>\n                  <Button onClick={() => setBookingModalOpen(true)} data-testid=\"book-new-lesson\">\n                    Book New Lesson\n                  </Button>\n                </div>\n\n                {lessons && lessons.length > 0 ? (\n                  <div className=\"grid gap-6\">\n                    {lessons.map((lesson: any) => (\n                      <Card key={lesson.id}>\n                        <CardHeader>\n                          <div className=\"flex items-center justify-between\">\n                            <CardTitle>{lesson.title}</CardTitle>\n                            <Badge variant={\n                              lesson.status === 'completed' ? 'default' :\n                              lesson.status === 'scheduled' ? 'secondary' : 'destructive'\n                            }>\n                              {lesson.status}\n                            </Badge>\n                          </div>\n                          <CardDescription>\n                            {lesson.description || `${lesson.type} lesson - ${lesson.focusArea}`}\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"grid md:grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <p className=\"text-muted-foreground\">Date & Time</p>\n                              <p className=\"font-medium\">\n                                {new Date(lesson.scheduledAt).toLocaleDateString()} at{' '}\n                                {new Date(lesson.scheduledAt).toLocaleTimeString([], { \n                                  hour: '2-digit', \n                                  minute: '2-digit' \n                                })}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Duration</p>\n                              <p className=\"font-medium\">{lesson.duration} minutes</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Price</p>\n                              <p className=\"font-medium\">${(lesson.price / 100).toFixed(2)}</p>\n                            </div>\n                          </div>\n                          {lesson.notes && (\n                            <div className=\"mt-4\">\n                              <p className=\"text-muted-foreground text-sm\">Notes</p>\n                              <p className=\"text-sm\">{lesson.notes}</p>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <Card>\n                    <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                      <Calendar className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                      <h3 className=\"font-semibold text-foreground mb-2\">No lessons scheduled</h3>\n                      <p className=\"text-muted-foreground text-center mb-4\">\n                        Book your first lesson to start personalized grammar instruction\n                      </p>\n                      <Button onClick={() => setBookingModalOpen(true)} data-testid=\"book-first-lesson\">\n                        Book Your First Lesson\n                      </Button>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"resources\" className=\"space-y-6\">\n                <h2 className=\"text-2xl font-bold text-foreground\">Learning Resources</h2>\n\n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {resources?.map((resource: any) => (\n                    <Card key={resource.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                            {resource.type === 'video' ? (\n                              <PlayCircle className=\"h-5 w-5 text-primary\" />\n                            ) : (\n                              <BookOpen className=\"h-5 w-5 text-primary\" />\n                            )}\n                          </div>\n                          <Badge variant={resource.isPremium ? \"default\" : \"secondary\"}>\n                            {resource.isPremium ? \"Premium\" : \"Free\"}\n                          </Badge>\n                        </div>\n                        <CardTitle className=\"text-lg\">{resource.title}</CardTitle>\n                        <CardDescription>{resource.description}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"text-sm text-muted-foreground\">\n                            {resource.type === 'video' ? (\n                              <span>{Math.round(resource.duration / 60)} minutes</span>\n                            ) : (\n                              <span>{Math.round(resource.fileSize / 1024 / 1024)} MB</span>\n                            )}\n                          </div>\n                          <Button size=\"sm\" data-testid={`resource-${resource.id}`}>\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            {resource.type === 'video' ? 'Watch' : 'Download'}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"forum\" className=\"space-y-6\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-2xl font-bold text-foreground\">Discussion Forum</h2>\n                  <Button data-testid=\"new-post\">New Post</Button>\n                </div>\n\n                {forumPosts && forumPosts.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {forumPosts.map((post: any) => (\n                      <Card key={post.id}>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">{post.title}</CardTitle>\n                          <CardDescription>\n                            Posted on {new Date(post.createdAt).toLocaleDateString()} • {post.replies} replies\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <p className=\"text-muted-foreground line-clamp-3\">{post.content}</p>\n                          <div className=\"mt-4 flex items-center justify-between\">\n                            <Badge variant=\"outline\">{post.category}</Badge>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`view-post-${post.id}`}>\n                              View Discussion\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <Card>\n                    <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                      <MessageCircle className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                      <h3 className=\"font-semibold text-foreground mb-2\">No forum posts yet</h3>\n                      <p className=\"text-muted-foreground text-center mb-4\">\n                        Start a discussion to connect with other students\n                      </p>\n                      <Button data-testid=\"create-first-post\">Create First Post</Button>\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n\n      {/* Modals */}\n      <BookingModal \n        isOpen={bookingModalOpen} \n        onClose={() => setBookingModalOpen(false)} \n      />\n      \n      {selectedQuizId && (\n        <QuizInterface\n          quizId={selectedQuizId}\n          isOpen={true}\n          onClose={() => setSelectedQuizId(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":27665},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { insertContactMessageSchema, type InsertContactMessage } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AuthModal } from \"@/components/auth-modal\";\nimport { BookingModal } from \"@/components/booking-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  GraduationCap,\n  Users,\n  Laptop,\n  Star,\n  CheckCircle,\n  Award,\n  Heart,\n  Tag,\n  Phone,\n  Mail,\n  MessageCircle,\n  Facebook,\n  Twitter,\n  Linkedin,\n  Youtube,\n  FileText,\n  Play,\n  Edit,\n  Download,\n} from \"lucide-react\";\n\nexport default function HomePage() {\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n  const [authMode, setAuthMode] = useState<\"login\" | \"register\">(\"login\");\n  const [bookingModalOpen, setBookingModalOpen] = useState(false);\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n\n  const { data: resources } = useQuery({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const contactForm = useForm<InsertContactMessage>({\n    resolver: zodResolver(insertContactMessageSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      subject: \"General Inquiry\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: InsertContactMessage) => {\n      const response = await apiRequest(\"POST\", \"/api/contact\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent!\",\n        description: \"Thank you for your inquiry. We'll get back to you within 24 hours.\",\n      });\n      contactForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const openAuth = (mode: \"login\" | \"register\") => {\n    setAuthMode(mode);\n    setAuthModalOpen(true);\n  };\n\n  const openBooking = () => {\n    if (!isAuthenticated) {\n      openAuth(\"login\");\n      return;\n    }\n    setBookingModalOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-primary-50 to-background py-20 lg:py-32\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary-50/50 to-transparent\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"lg:grid lg:grid-cols-12 lg:gap-8 items-center\">\n            <div className=\"lg:col-span-6\">\n              <h1 className=\"text-4xl lg:text-6xl font-bold text-foreground leading-tight\">\n                Master English Grammar with{\" \"}\n                <span className=\"text-primary-600\">Expert Guidance</span>\n              </h1>\n              <p className=\"mt-6 text-xl text-muted-foreground leading-relaxed\">\n                Join thousands of students improving their English grammar through personalized\n                lessons, interactive quizzes, and expert tutoring. Start your journey to perfect\n                grammar today.\n              </p>\n              <div className=\"mt-8 flex flex-col sm:flex-row gap-4\">\n                <Button\n                  size=\"lg\"\n                  onClick={() => openAuth(\"register\")}\n                  data-testid=\"hero-signup\"\n                  className=\"text-lg px-8 py-4\"\n                >\n                  Start Learning Free\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={openBooking}\n                  data-testid=\"hero-book-lesson\"\n                  className=\"text-lg px-8 py-4\"\n                >\n                  Book a Lesson\n                </Button>\n              </div>\n              <div className=\"mt-8 flex items-center space-x-6 text-sm text-muted-foreground\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"text-success-500 mr-2 h-4 w-4\" />\n                  <span>Free trial available</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Users className=\"text-success-500 mr-2 h-4 w-4\" />\n                  <span>10,000+ students</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Star className=\"text-warning-500 mr-2 h-4 w-4\" />\n                  <span>4.9/5 rating</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"mt-12 lg:mt-0 lg:col-span-6\">\n              <img\n                src=\"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n                alt=\"Students learning English grammar in a modern classroom setting\"\n                className=\"rounded-2xl shadow-2xl w-full h-auto\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Overview */}\n      <section id=\"services\" className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\">\n              Comprehensive Grammar Learning Solutions\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Choose from our range of learning options designed to fit your schedule, learning\n              style, and goals.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-card p-8 rounded-2xl shadow-lg border border-border hover:shadow-xl transition-shadow\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-6\">\n                <GraduationCap className=\"text-primary-600 h-8 w-8\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-foreground mb-4\">Private Lessons</h3>\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                One-on-one personalized grammar coaching tailored to your specific needs and\n                learning pace.\n              </p>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Customized lesson plans\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Flexible scheduling\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Direct teacher feedback\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Progress tracking\n                </li>\n              </ul>\n              <Button\n                className=\"w-full\"\n                onClick={openBooking}\n                data-testid=\"book-private-lesson\"\n              >\n                Book Now\n              </Button>\n            </div>\n\n            <div className=\"bg-card p-8 rounded-2xl shadow-lg border border-border hover:shadow-xl transition-shadow\">\n              <div className=\"w-16 h-16 bg-success-500/10 rounded-full flex items-center justify-center mb-6\">\n                <Users className=\"text-success-600 h-8 w-8\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-foreground mb-4\">Group Classes</h3>\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                Interactive group sessions where you learn alongside peers and benefit from\n                collaborative learning.\n              </p>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Small class sizes (max 6)\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Peer interaction\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Cost-effective\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Regular schedule\n                </li>\n              </ul>\n              <Button\n                className=\"w-full bg-success-600 hover:bg-success-700\"\n                onClick={openBooking}\n                data-testid=\"join-group-class\"\n              >\n                Join Class\n              </Button>\n            </div>\n\n            <div className=\"bg-card p-8 rounded-2xl shadow-lg border border-border hover:shadow-xl transition-shadow\">\n              <div className=\"w-16 h-16 bg-warning-500/10 rounded-full flex items-center justify-center mb-6\">\n                <Laptop className=\"text-warning-600 h-8 w-8\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-foreground mb-4\">Online Tutoring</h3>\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                Self-paced online learning with interactive quizzes, videos, and comprehensive\n                grammar resources.\n              </p>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  24/7 platform access\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Interactive quizzes\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Video tutorials\n                </li>\n                <li className=\"flex items-center text-muted-foreground\">\n                  <CheckCircle className=\"text-success-500 mr-3 h-4 w-4\" />\n                  Progress analytics\n                </li>\n              </ul>\n              <Link href=\"/dashboard\">\n                <Button\n                  className=\"w-full bg-warning-600 hover:bg-warning-700\"\n                  data-testid=\"start-online-learning\"\n                >\n                  Start Learning\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section id=\"about\" className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"lg:grid lg:grid-cols-12 lg:gap-12 items-center\">\n            <div className=\"lg:col-span-5 mb-12 lg:mb-0\">\n              <img\n                src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"\n                alt=\"Professional English grammar teacher in classroom\"\n                className=\"rounded-2xl shadow-xl w-full h-auto\"\n              />\n            </div>\n            <div className=\"lg:col-span-7\">\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-6\">\n                Meet Your Grammar Expert\n              </h2>\n              <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\">\n                With over 15 years of experience teaching English grammar, I'm passionate about\n                helping students master the intricacies of the English language through\n                personalized, engaging instruction.\n              </p>\n\n              <div className=\"space-y-6 mb-8\">\n                <div className=\"flex items-start\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mr-4 flex-shrink-0\">\n                    <Tag className=\"text-primary-600 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                      Expert Qualifications\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      MA in English Literature, TESOL Certified, Cambridge Assessment Examiner\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"w-12 h-12 bg-success-500/10 rounded-full flex items-center justify-center mr-4 flex-shrink-0\">\n                    <Award className=\"text-success-600 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Proven Results</h3>\n                    <p className=\"text-muted-foreground\">\n                      98% student satisfaction rate, 95% pass rate on standardized exams\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"w-12 h-12 bg-warning-500/10 rounded-full flex items-center justify-center mr-4 flex-shrink-0\">\n                    <Heart className=\"text-warning-600 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                      Teaching Philosophy\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      Making grammar accessible, engaging, and relevant to real-world communication\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-4\">\n                <Button size=\"lg\" onClick={openBooking} data-testid=\"book-consultation\">\n                  Book a Free Consultation\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={() => {\n                    document.getElementById(\"contact\")?.scrollIntoView({ behavior: \"smooth\" });\n                  }}\n                  data-testid=\"get-in-touch\"\n                >\n                  Get in Touch\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Resources Section */}\n      <section id=\"resources\" className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-4\">\n              Grammar Learning Resources\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Access our comprehensive collection of grammar guides, exercises, and reference\n              materials.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {resources?.slice(0, 3).map((resource: any) => (\n              <div\n                key={resource.id}\n                className=\"bg-card rounded-xl shadow-lg border border-border overflow-hidden hover:shadow-xl transition-shadow\"\n              >\n                <img\n                  src={\n                    resource.type === \"video\"\n                      ? \"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n                      : resource.type === \"worksheet\"\n                      ? \"https://images.unsplash.com/photo-1434030216411-0b793f4b4173?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n                      : \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n                  }\n                  alt={resource.title}\n                  className=\"w-full h-48 object-cover\"\n                />\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span\n                      className={`text-xs font-medium px-2 py-1 rounded-full ${\n                        resource.type === \"pdf\"\n                          ? \"bg-primary/10 text-primary-600\"\n                          : resource.type === \"video\"\n                          ? \"bg-warning-500/10 text-warning-600\"\n                          : \"bg-success-500/10 text-success-600\"\n                      }`}\n                    >\n                      {resource.type === \"pdf\"\n                        ? \"Grammar Guide\"\n                        : resource.type === \"video\"\n                        ? \"Video Lesson\"\n                        : \"Worksheet\"}\n                    </span>\n                    <span\n                      className={`font-medium text-sm ${\n                        resource.isPremium ? \"text-primary-600\" : \"text-success-600\"\n                      }`}\n                    >\n                      {resource.isPremium ? \"Premium\" : \"Free\"}\n                    </span>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">{resource.title}</h3>\n                  <p className=\"text-muted-foreground text-sm mb-4\">{resource.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      {resource.type === \"pdf\" ? (\n                        <FileText className=\"mr-2 h-4 w-4\" />\n                      ) : resource.type === \"video\" ? (\n                        <Play className=\"mr-2 h-4 w-4\" />\n                      ) : (\n                        <Edit className=\"mr-2 h-4 w-4\" />\n                      )}\n                      <span>\n                        {resource.type === \"video\"\n                          ? `${Math.round(resource.duration / 60)} minutes`\n                          : resource.type === \"worksheet\"\n                          ? \"50 exercises\"\n                          : \"24 pages\"}\n                      </span>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      className={\n                        resource.type === \"video\"\n                          ? \"bg-warning-600 hover:bg-warning-700\"\n                          : resource.type === \"worksheet\"\n                          ? \"bg-success-600 hover:bg-success-700\"\n                          : \"\"\n                      }\n                      data-testid={`resource-${resource.type}`}\n                    >\n                      {resource.type === \"video\" ? \"Watch\" : \"Download\"}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"lg:grid lg:grid-cols-12 lg:gap-12\">\n            <div className=\"lg:col-span-5 mb-12 lg:mb-0\">\n              <h2 className=\"text-3xl lg:text-4xl font-bold text-foreground mb-6\">Get in Touch</h2>\n              <p className=\"text-xl text-muted-foreground mb-8\">\n                Have questions about our grammar courses? Ready to start your learning journey?\n                Contact us today!\n              </p>\n\n              <div className=\"space-y-6\">\n                <div className=\"flex items-start\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mr-4 flex-shrink-0\">\n                    <Mail className=\"text-primary-600 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-1\">Email Us</h3>\n                    <p className=\"text-muted-foreground\">hello@grammarmaster.com</p>\n                    <p className=\"text-muted-foreground\">Response within 24 hours</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"w-12 h-12 bg-success-500/10 rounded-full flex items-center justify-center mr-4 flex-shrink-0\">\n                    <Phone className=\"text-success-600 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-1\">Call Us</h3>\n                    <p className=\"text-muted-foreground\">+1 (555) 123-4567</p>\n                    <p className=\"text-muted-foreground\">Mon-Fri, 9am-6pm EST</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start\">\n                  <div className=\"w-12 h-12 bg-warning-500/10 rounded-full flex items-center justify-center mr-4 flex-shrink-0\">\n                    <MessageCircle className=\"text-warning-600 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground mb-1\">Live Chat</h3>\n                    <p className=\"text-muted-foreground\">Available on our platform</p>\n                    <p className=\"text-muted-foreground\">Instant support for students</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"lg:col-span-7\">\n              <div className=\"bg-card rounded-2xl shadow-lg p-8\">\n                <Form {...contactForm}>\n                  <form\n                    onSubmit={contactForm.handleSubmit((data) => contactMutation.mutate(data))}\n                    className=\"space-y-6\"\n                    data-testid=\"contact-form\"\n                  >\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={contactForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"John\" {...field} data-testid=\"contact-firstname\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={contactForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Doe\" {...field} data-testid=\"contact-lastname\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={contactForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"your@email.com\"\n                              {...field}\n                              data-testid=\"contact-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={contactForm.control}\n                      name=\"subject\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Subject</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"contact-subject\">\n                                <SelectValue placeholder=\"Select a subject\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"General Inquiry\">General Inquiry</SelectItem>\n                              <SelectItem value=\"Course Information\">Course Information</SelectItem>\n                              <SelectItem value=\"Technical Support\">Technical Support</SelectItem>\n                              <SelectItem value=\"Billing Question\">Billing Question</SelectItem>\n                              <SelectItem value=\"Partnership Opportunity\">\n                                Partnership Opportunity\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={contactForm.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Message</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Tell us how we can help you...\"\n                              rows={5}\n                              {...field}\n                              data-testid=\"contact-message\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={contactMutation.isPending}\n                      data-testid=\"contact-submit\"\n                    >\n                      {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                    </Button>\n                  </form>\n                </Form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card py-16 border-t border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center mb-6\">\n                <GraduationCap className=\"text-primary-600 h-8 w-8 mr-3\" />\n                <span className=\"text-xl font-bold text-foreground\">Grammar Master</span>\n              </div>\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                Empowering students to master English grammar through expert instruction,\n                interactive learning, and personalized feedback. Join our community of successful\n                learners today.\n              </p>\n              <div className=\"flex space-x-4\">\n                <Button variant=\"ghost\" size=\"icon\" className=\"hover:bg-primary/10\">\n                  <Facebook className=\"h-5 w-5\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" className=\"hover:bg-primary/10\">\n                  <Twitter className=\"h-5 w-5\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" className=\"hover:bg-primary/10\">\n                  <Linkedin className=\"h-5 w-5\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" className=\"hover:bg-primary/10\">\n                  <Youtube className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-6\">Quick Links</h3>\n              <ul className=\"space-y-3\">\n                <li>\n                  <a\n                    href=\"#home\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Home\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#about\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    About\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#services\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Services\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#resources\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Resources\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#contact\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Contact\n                  </a>\n                </li>\n              </ul>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-6\">Support</h3>\n              <ul className=\"space-y-3\">\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Help Center\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Privacy Policy\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Terms of Service\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Cookie Policy\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                  >\n                    Accessibility\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-border mt-12 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <p className=\"text-muted-foreground text-sm\">\n                © 2024 Grammar Master. All rights reserved.\n              </p>\n              <p className=\"text-muted-foreground text-sm mt-4 md:mt-0\">\n                Built with ❤️ for English learners worldwide\n              </p>\n            </div>\n          </div>\n        </div>\n      </footer>\n\n      {/* Modals */}\n      <AuthModal\n        isOpen={authModalOpen}\n        onClose={() => setAuthModalOpen(false)}\n        initialMode={authMode}\n      />\n      <BookingModal isOpen={bookingModalOpen} onClose={() => setBookingModalOpen(false)} />\n    </div>\n  );\n}\n","size_bytes":32905},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport { AuthModal } from \"@/components/auth-modal\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated } = useAuth();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-muted/30 px-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Welcome Back</h1>\n          <p className=\"text-muted-foreground\">\n            Don't have an account?{\" \"}\n            <Link href=\"/register\" className=\"text-primary font-medium hover:underline\">\n              Sign up\n            </Link>\n          </p>\n        </div>\n        <AuthModal \n          isOpen={true} \n          onClose={() => setLocation(\"/\")} \n          initialMode=\"login\" \n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1082},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/quiz.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { QuizInterface } from \"@/components/quiz-interface\";\n\ninterface QuizPageProps {\n  quizId: string;\n}\n\nexport default function QuizPage({ quizId }: QuizPageProps) {\n  const [, setLocation] = useLocation();\n\n  const handleClose = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  if (!quizId) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  return (\n    <QuizInterface\n      quizId={quizId}\n      isOpen={true}\n      onClose={handleClose}\n    />\n  );\n}\n","size_bytes":537},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport { AuthModal } from \"@/components/auth-modal\";\n\nexport default function RegisterPage() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated } = useAuth();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-muted/30 px-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Create Account</h1>\n          <p className=\"text-muted-foreground\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" className=\"text-primary font-medium hover:underline\">\n              Sign in\n            </Link>\n          </p>\n        </div>\n        <AuthModal \n          isOpen={true} \n          onClose={() => setLocation(\"/\")} \n          initialMode=\"register\" \n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1089},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}